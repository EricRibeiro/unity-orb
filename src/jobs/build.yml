description: >
  Simple drop-in job to build your Unity game.

parameters:
  step-name:
    type: string
    default: Build the project
    description: |
      Specify a custom step name for the build command, if desired.
  os:
    default: ubuntu
    description: |
      Pick the base OS for the GameCI image.
      The available options are "ubuntu" and "windows".
      More details can be found at https://game.ci/docs/docker/versions.
    type: enum
    enum: ["ubuntu", "windows"]
  target-platform:
    default: linux-il2cpp
    description: |
      Pick the target platform for the GameCI image.
      This differs from the "build-target" parameter in that it is used for the GameCI image, not Unity.
      Available options can be found at https://game.ci/docs/docker/versions.
    type: string
  editor-version:
    default: 2021.3.0f1
    description: |
      Pick the editor version for the GameCI image.
      Make sure to pick the same major version as the Unity version you generated the license for.
      Available options can be found at https://game.ci/docs/docker/versions.
    type: string
  unity-license-var-name:
    type: env_var_name
    description: |
      Enter the name of the environment variable containing Unity's license file (ULF) encoded in base64.
      For more information on how to get such file and encoded it, access the wiki page: TODO create and add wiki page.
  project-path:
    type: string
    default: "."
    description: |
      Enter the path of your Unity project.
      This should be the directory that has an "Assets" folder inside it.
  build-target:
    type: string
    description: |
      The target platform of your build.
      Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2022.2/Documentation/ScriptReference/BuildTarget.html
  build-name:
    type: string
    default: "UnityBuild"
    description: |
      Enter the name for this build.

docker:
  - image: 'unityci/editor:<<parameters.os>>-<<parameters.editor-version>>-<<parameters.target-platform>>-1'

steps:
  - checkout
  - prepare-env:
      unity-license-var-name: << parameters.unity-license-var-name >>
      project-path: <<parameters.project-path>>
  - build:
      step-name: << parameters.step-name >>
      build-name: <<parameters.build-name>>
      build-target: <<parameters.build-target>>
      project-path: <<parameters.project-path>>
  - store_artifacts:
      path: <<parameters.project-path>>/Builds/<<parameters.build-target>>
