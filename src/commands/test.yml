description: >
  This command tests an Unity project.

parameters:
  step-name:
    type: string
    default: Run tests
    description: |
      Specify a custom step name for this command, if desired.
  project-path:
    type: string
    default: "."
    description: |
      Enter the relative path of your Unity project.
      This should be the directory that has an "Assets" folder inside it.
  test-platform:
    type: string
    default: "playmode"
    description: |
      Specify the test platform to run tests on.
      Valid values are "editmode", "playmode" and Unity's target builds.
      More information can be found on: https://docs.unity3d.com/Packages/com.unity.test-framework@2.0/manual/reference-command-line.html
  cache-version:
    type: string
    default: "v1"
    description: |
      Change the default cache version if you need to clear the cache for any reason.
  include-branch-in-cache-key:
      type: boolean
      default: true
      description: >
          If true, this cache bucket will only apply to jobs within the same branch.
  no_output_timeout:
    type: string
    default: "10m"
    description: Elapsed time the command can run without output.
  custom-parameters:
    type: string
    default: ""
    description: |
      Additional arguments for the Unity CLI.
      Use it to pass arguments to Unity's test options. Environment variables are supported.
      The parameters must be separated by space and must be in the format "-key value" or "-key" for booleans.
      Example: '-testFilter "MyNamespace.Something.MyTest" -assemblyNames "MyUnitTestAssembly" -testCategory "Unit;Integration"'.

steps:
  - run:
      name: << parameters.step-name >>
      no_output_timeout: << parameters.no_output_timeout >>
      environment:
        PARAM_PROJECT_PATH: << parameters.project-path >>
        PARAM_TEST_PLATFORM: << parameters.test-platform >>
        PARAM_CUSTOM_PARAMETERS: << parameters.custom-parameters >>
        SCRIPT_TEST_LINUX: << include(scripts/linux/test.sh) >>
        SCRIPT_TEST_WINDOWS: << include(scripts/windows/test.sh) >>
        SCRIPT_TEST_MACOS: << include(scripts/macos/test.sh) >>
        SCRIPT_UTILS: << include(scripts/utils.sh) >>
        DEPENDENCY_NUNIT_TRANSFORM: << include(dependencies/nunit-transforms/nunit3-junit.xslt) >>
      command: << include(scripts/test.sh) >>
  - save_cache:
      key: unity-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "<<parameters.project-path>>/Packages/packages-lock.json" }}
      paths:
        - <<parameters.project-path>>/Library/
  - store_test_results:
      path: << parameters.project-path >>/<< parameters.test-platform >>-junit-results.xml
